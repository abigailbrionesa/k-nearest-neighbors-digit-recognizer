PS C:\Users\abiga\Documents\CSC171\CSC> & C:/Users/abiga/AppData/Local/Programs/Python/Python313/python.exe c:/Users/abiga/Documents/CSC171/CSC/project1/tests.py
Manhattan neighbors: [[0, 50, 50.0]]
Euclidean neighbors: [[0, 50, 50.0]]
Predicted label (Manhattan): 0
Predicted label (Euclidean): 0
testing:flatten_image
case 1 passed? True
case 2 passed? True
case 3 (edge case) passed? True

testing:manhattan_euclidean
Manhattan case 1 passed? True
Euclidean case 1 passed? True
Manhattan normal 2 passed? True
Euclidean normal 2 passed? True
Edge case distances passed? True

testing:compute_distances
case 1 passed? True
case 2 passed? True
case 3 (edge case) passed? True

testing:k_nearest_neighbors
Manhattan neighbors: [[0, 5, 5.0]]
Euclidean neighbors: [[0, 5, 5.0]]
case 1 passed? True
Manhattan neighbors: [[5, 0, 0.0], [0, 2295, 765.0]]
Euclidean neighbors: [[5, 0, 0.0], [0, 2295, 765.0]]
case 2 passed? True
Manhattan neighbors: [[0, 0, 0.0], [5, 2295, 765.0]]
Euclidean neighbors: [[0, 0, 0.0], [5, 2295, 765.0]]
case 3 (edge case) passed? True

testing:majority_vote
case 1 passed? True
case 2 passed? True
case 3 (edge case: tie) passed? True
PS C:\Users\abiga\Documents\CSC171\CSC>

Code:
from project1_knn import flatten_image, compute_distances, k_nearest_neighbors, majority_vote, manhattan, euclidean

print("testing:flatten_image")
# case 1
img1 = [[0,1,2],[3,4,5],[6,7,8]]
expected1 = [0,1,2,3,4,5,6,7,8]
print("case 1 passed?", flatten_image(img1) == expected1)

# case 2
img2 = [[10,10,10],[20,20,20],[30,30,30]]
expected2 = [10,10,10,20,20,20,30,30,30]
print("case 2 passed?", flatten_image(img2) == expected2)

# case 3 (edge case: all zeros)
img3 = [[0,0,0],[0,0,0],[0,0,0]]
expected3 = [0]*9
print("case 3 (edge case) passed?", flatten_image(img3) == expected3)


print("\ntesting:manhattan_euclidean")
# case 1
img_a = [0,0,0,0,0,0,0,0,0]
img_b = [1,2,3,4,5,6,7,8,9]
print("Manhattan case 1 passed?", manhattan(img_a,img_b) == 45)
print("Euclidean case 1 passed?", round(euclidean(img_a,img_b),3) == 16.882)

# case 2
img_c = [5]*9
img_d = [10]*9
print("Manhattan normal 2 passed?", manhattan(img_c,img_d) == 45)
print("Euclidean normal 2 passed?", euclidean(img_c,img_d) == 15.0)

# case 3 (edge case: identical images)
img_e = [1]*9
img_f = [1]*9
print("Edge case distances passed?", manhattan(img_e,img_f) == 0 and euclidean(img_e,img_f) == 0)


print("\ntesting:compute_distances")
train_imgs = [[0]*9, [255]*9]
train_labels = [0, 5]

# case 1
test_img = [0,0,0,0,0,0,0,0,5]
distances = compute_distances(test_img, train_imgs, train_labels)
expected1 = [[0, 5, 5.0], [5, 2290, 763.348]]
print("case 1 passed?", distances == expected1)

# case 2
test_img2 = [255]*9
distances2 = compute_distances(test_img2, train_imgs, train_labels)
expected2 = [[0, 2295, 765.0], [5, 0, 0.0]]
print("case 2 passed?", distances2 == expected2)

# case 3 (edge case: identical to train image)
test_img3 = [0]*9
distances3 = compute_distances(test_img3, train_imgs, train_labels)
expected3 = [[0, 0, 0.0], [5, 2295, 765.0]]
print("case 3 (edge case) passed?", distances3 == expected3)


print("\ntesting:k_nearest_neighbors")
k = 1
neighbors_manhattan, neighbors_euclidean = k_nearest_neighbors(distances, k)
print("case 1 passed?", neighbors_manhattan == [[0, 5, 5.0]])

k = 2
neighbors_manhattan2, neighbors_euclidean2 = k_nearest_neighbors(distances2, k)
print("case 2 passed?", neighbors_manhattan2 == [[5, 0, 0.0], [0, 2295, 765.0]])

# edge case: k = number of training images
k = 2
neighbors_manhattan3, neighbors_euclidean3 = k_nearest_neighbors(distances3, k)
print("case 3 (edge case) passed?", neighbors_manhattan3 == [[0, 0, 0.0], [5, 2295, 765.0]])


print("\ntesting:majority_vote")
# case 1
labels1 = [0,0,1]
pred_label1 = majority_vote(labels1)
print("case 1 passed?", pred_label1 == 0)

# case 2
labels2 = [1,3,3]
pred_label2 = majority_vote(labels2)
print("case 2 passed?", pred_label2 == 3)

# case 3 (edge case: tie)
labels3 = [1,1,2,2]
pred_label3 = majority_vote(labels3)
print("case 3 (edge case: tie) passed?", pred_label3 in [1,2])

















